package reportes;

import modelo.prestamo.Prestamo;
import modelo.recurso.CategoriaRecurso;
import modelo.recurso.RecursoDigital;
import modelo.usuario.Usuario;

import java.util.*;
import java.util.stream.Collectors;

public class GeneradorReportes {

    private List<Prestamo> historialPrestamos = List.of();

    public GeneradorReportes() {
        this.historialPrestamos = historialPrestamos;
    }

    // ðŸ“Š Recursos mÃ¡s prestados
    public void mostrarRecursosMasPrestados() {
        System.out.println("\nðŸ“š Recursos mÃ¡s prestados:");

        Map<RecursoDigital, Long> conteo = historialPrestamos.stream()
                .collect(Collectors.groupingBy(Prestamo::getRecurso, Collectors.counting()));

        conteo.entrySet().stream()
                .sorted(Map.Entry.<RecursoDigital, Long>comparingByValue().reversed())
                .limit(5)
                .forEach(e -> System.out.printf("â€¢ %s â†’ %d prÃ©stamos%n", e.getKey().getTitulo(), e.getValue()));
    }

    // ðŸ™‹ Usuarios mÃ¡s activos
    public void mostrarUsuariosMasActivos() {
        System.out.println("\nðŸ‘¤ Usuarios mÃ¡s activos:");

        Map<Usuario, Long> conteo = historialPrestamos.stream()
                .collect(Collectors.groupingBy(Prestamo::getUsuario, Collectors.counting()));

        conteo.entrySet().stream()
                .sorted(Map.Entry.<Usuario, Long>comparingByValue().reversed())
                .limit(5)
                .forEach(e -> System.out.printf("â€¢ %s â†’ %d prÃ©stamos%n", e.getKey().getNombre(), e.getValue()));
    }

    // ðŸ“‚ EstadÃ­sticas por categorÃ­a
    public void mostrarEstadisticasPorCategoria() {
        System.out.println("\nðŸ“ˆ EstadÃ­sticas de uso por categorÃ­a:");

        Map<CategoriaRecurso, Long> conteo = historialPrestamos.stream()
                .collect(Collectors.groupingBy(p -> p.getRecurso().getCategoria(), Collectors.counting()));

        conteo.forEach((categoria, cantidad) ->
                System.out.printf("â€¢ %s â†’ %d prÃ©stamos%n", categoria, cantidad));
    }
}
